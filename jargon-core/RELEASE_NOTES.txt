
*'''Project''': Jargon-core - IRODS Java API
*'''Date''': 3/20/2012
*'''Release Version''': 3.1.2-SNAPSHOT	
*'''git tag''': 3.1.2 - TBD

==News==

WORK IN PROGRESS

Jargon-core implements the iRODS protocol, and allows development of iRODS-enabled Java applications.  This API is especially useful for developing
mid-tier applications and services, as well as desktop-clients (such as iDROP).  These libraries also provide a foundation for a new set of interfaces that will come with iRODS.

Note that this release supports iRODS built-in authorization.  Adding GSI and general GSS support (including Kerberos) will come in a follow-on release planned shortly.

Note that this API represents a fundamental shift, and is meant to make development of applications easier and faster.

Please go to [[https://code.renci.org/gf/project/jargon/]] for the latest news and info.

Jargon-core consists of the following libraries

* jargon-core - base libraries, implementation of the iRODS protocol
* jargon-data-utils - additional functionality for dealing with iRODS data, such as building trees, storing information in iRODS on behalf of applications, and doing diffs between local and iRODS
* jargon-security - code for use with Spring security
* jargon-user-tagging - code for using free tagging and other metadata metaphors on top of iRODS
* jargon-transfer - transfer manager for managing and synchronizing data with iRODS
* jargon-ticket - support for ticket processing
* jargon-httpstream - stream http content into iRODS via Jargon

Other libraries are planned, such as connection pooling, as well as administrative functions.

==Requirements==

*Jargon depends on Java 1.6+
*Jargon is built using Apache Maven2, see POM for dependencies
*Jargon supports iRODS 2.4 through iRODS 3.0, and is tested with the current (as of release time) development version of iRODS

==Libraries==


Jargon-core uses Maven for dependency management.  See the pom.xml file for references to various dependencies.

Note that the following bug and feature requests are logged in GForge with related commit information [[https://code.renci.org/gf/project/jargon/tracker/]]


==Bug Fixes==

[#756] IRODSDataConversionUtil date should be null if no data in query result
[#761] unregister collection recursively causes error when multiple subfolders
[#768] -1202000 error executing rule via jargon - added unit test to capture reported bug

==Features==

 * [#5] GenQuery Enhancements
 ** new query builder model allows easier programmatic building of General Query
 
 * [#713] additional query and data generation methods for tickets
 ** added method to check if a ticket is in use
 ** additional listing methods for data objects and collections
 ** added method to IRODSServerProperties for isSupportTickets()
 ** added 'meta' methods to add and update tickets for cleaner mid-tier code
 
 * [#723] add ireg support in jargon 
 ** added methods to unregister a collection
 ===========================
 
 
 
 
 
 
 
 
 received msg: 
<authRequestOut_PI>
<challenge>6v7NJE/3oVN0HDSmoLCHoQXUzR58MYQs9MCFCRGFeXBwM68nttux4A6WTRyenVSAwAwiO9hPGon7i/BhZJk61Q==</challenge>
</authRequestOut_PI>
0</cook
218	   if (status) {
(gdb) 
223	   memset(md5Buf, 0, sizeof(md5Buf));
(gdb) 
224	   strncpy(md5Buf, authReqOut->challenge, CHALLENGE_LEN);
(gdb) 
225	   printf("Challenge:%s\n",md5Buf);
(gdb) 
Challenge:???$O??St4???????|1?,???	?ypp3?'?Û±??M??T??
                                                         ";?O????ad?:?
226	   printf("char0:%c\n", md5Buf[0]);
(gdb) 
char0:?
227	   printf("char0x:%2.2x\n", (unsigned char)md5Buf[0]);
(gdb) 
char0x:ea
229	   printf("char1:%c\n", md5Buf[1]);
(gdb) 
char1:?
230	   printf("char1x:%2.2x\n", (unsigned char)md5Buf[1]);
(gdb) 
char1x:fe
250	   	     (unsigned char)md5Buf[15]);
(gdb) 
252	      printf("signiture from challenge:%s\n",prevChallengeSignitureClient);
(gdb) 
signiture from challenge:eafecd244ff7a153741c34a6a0b087a1
258	   if (strncmp(ANONYMOUS_USER, Conn->proxyUser.userName, NAME_LEN) == 0) {
(gdb) 
 
 