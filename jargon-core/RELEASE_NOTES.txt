*'''Project''': Jargon-core API
*'''Date''': XX/XX/XX
*'''Release Version''': 3.2.X.X
*'''git tag''': 3.2.X.X

==News==

work in progress post 3.2.1.3 

Jargon-core implements the iRODS protocol, and allows development of iRODS-enabled Java applications.  This API is especially useful for developing
mid-tier applications and services, as well as desktop-clients (such as iDROP).  These libraries also provide a foundation for a new set of interfaces that will come with iRODS.

Note that this API represents a fundamental shift, and is meant to make development of applications easier and faster.

Please go to [[https://code.renci.org/gf/project/jargon/]] for the latest news and info.

Jargon-core consists of the following libraries

* jargon-core - base libraries, implementation of the iRODS protocol
* jargon-data-utils - additional functionality for dealing with iRODS data, such as building trees, storing information in iRODS on behalf of applications, and doing diffs between local and iRODS
* jargon-security - code for use with Spring security
* jargon-user-tagging - code for using free tagging and other metadata metaphors on top of iRODS
* jargon-transfer - transfer manager for managing and synchronizing data with iRODS
* jargon-ticket - support for ticket processing
* jargon-httpstream - stream http content into iRODS via Jargon

Other libraries are planned, such as connection pooling, as well as administrative functions.

==Requirements==

*Jargon depends on Java 1.6+
*Jargon is built using Apache Maven2, see POM for dependencies

*Jargon supports iRODS 2.5 through iRODS 3.2

==Libraries==

Jargon-core uses Maven for dependency management.  See the pom.xml file for references to various dependencies.

Note that the following bug and feature requests are logged in GForge with related commit information [[https://code.renci.org/gf/project/jargon/tracker/]]

==Bug Fixes==

* [#1092] add reconnect option to iDrop
**Add irodsAccount info to IRODSCommands during reconnect
**Add new constructor and initializer for IRODSCommands that avoids calling the finalizer on a connection when the IRODSCommands was created in 'stand-alone' mode.  This fixes a bug where
the conection finalizer could be called and the connection closed at an inappropriate time when in connection restart mode
 
 *[#1093] Broken pipe error did not propogate in parallel transfer
 **Small clean-ups in transfer processing and error callbacks
 
 *[#1109] specific query no data found results in exception
 **Specific query was returning a DataNotFoundException when no results returned, fixed to return an empty result set
 
==Features==

*[#984] iDrop web '2.0' redesign effort
**Added additional fields to the user profile, such as eduPerson attributes
**Added 'starring' support to the jargon-user-tagging package, managing the starring of files and collections
**Added UploadsService to jargon-data-utils to help manage an 'uploads' directory convention.  This provides a standard place to receive uploads from various clients.

 [#1107] support for large collection paging
 **Added totalRecords to IRODSDomainObject so that returned objects from queries can carry the total number of results
 **CollectionAndDataObjectListAndSearchAO results now include total record counts when available  
 **Adding pagination package to jargon-data-utils, providing a model that can be used to build smart paging controls into interfaces
 **Added a listDataObjectsAndCollectionsUnderPathProducingPagingAwareCollectionListing to CollectionAndDataObjectListAndSearchAO, which
 lists child data objects and collections, and provides addtional information on the paging status of the independent collections and data objects.
 
 
 
 
 
 