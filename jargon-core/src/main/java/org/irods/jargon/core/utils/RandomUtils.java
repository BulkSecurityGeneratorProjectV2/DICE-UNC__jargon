/**
 *
 */
package org.irods.jargon.core.utils;

import java.security.SecureRandom;

import org.apache.commons.lang.RandomStringUtils;

/**
 * Various utils for generating ramdomness (e.g. encryption keys used in
 * client/server negotiation)
 *
 * @author Mike Conway - DICE
 *
 */
public class RandomUtils {

	/**
	 * Return a randomly generated byte array using <code>SecureRandom</code>
	 *
	 * @param length
	 *            <code>int</code> with length of desired array
	 * @return <code>byte[]</code> of <code>length</code> filled with random
	 *         bytes
	 */
	public static final byte[] generateRandomBytesOfLength(final int length) {
		if (length <= 0) {
			throw new IllegalArgumentException("length must be > 0");
		}

		byte[] result = new byte[length];
		SecureRandom random = new SecureRandom();
		random.nextBytes(result);
		return result;
	}

	/**
	 * Returns a random char array that has a total length of
	 * <code>length</code> chars. Remember that char is a 2 byte value.
	 *
	 * @param length
	 * @return
	 */
	public static final char[] generateRandomChars(final int length) {

		if (length <= 0) {
			throw new IllegalArgumentException("length must be > 0");
		}

		if ((length % 2) != 0) {
			throw new IllegalArgumentException("length must be even");
		}

		return RandomStringUtils.randomAlphanumeric(length).toCharArray();

	}
}
